// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, mongodb, that;

  mongodb = require("mongodb").MongoClient;

  ObjectID = require('mongodb').ObjectID;

  that = this;

  this.newID = function() {
    return new ObjectID();
  };

  this.doconnect = function(o, cb) {
    return mongodb.connect(o.url, {
      useNewUrlParser: true
    }, function(e, client) {
      var collection, db;
      db = client.db(o.db);
      collection = db.collection(o.collection);
      o.clientObj = client;
      o.dbObj = db;
      o.collectionObj = collection;
      return cb(e, o);
    });
  };

  this.find = function(o, cb) {
    return this.doconnect(o, function(e, o) {
      var collection;
      collection = o.collectionObj;
      return collection.find(o.key).toArray(function(e, docs) {
        return cb(e, docs);
      });
    });
  };

  this.create = function(o, cb) {
    return this.doconnect(o, function(e, o) {
      var collection;
      collection = o.collectionObj;
      o.data.updateTime = new Date();
      o.data.createTime = new Date();
      o.data._id = new ObjectID();
      o.data.enabled = true;
      return that.find(o, function(e, docs) {
        if (docs.length === 0) {
          collection.insertOne(o.data, function(e, r) {
            return cb(e, r.ops);
          });
        } else {
          cb(null, []);
        }
        return o.clientObj.close();
      });
    });
  };

  this.upsert = function(o, cb) {
    return this.doconnect(o, function(e, o) {
      var collection;
      collection = o.collectionObj;
      o.data.updateTime = new Date();
      delete o.data._id;
      return collection.updateOne(o.key, {
        $set: o.data
      }, {
        upsert: true
      }, function(e, r) {
        that.find(o, cb);
        return o.clientObj.close();
      });
    });
  };

  this.disable = function(o, cb) {
    o.data = {};
    o.data.enabled = false;
    o.data.updateTime = new Date();
    return this.upsert(o, cb);
  };

  this["delete"] = function(o, cb) {
    return this.doconnect(o, function(e, o) {
      var collection;
      collection = o.collectionObj;
      return that.find(o, function(e, docs) {
        return collection.deleteMany(o.key, function(e, r) {
          var result;
          result = r.result;
          result.docs = docs;
          cb(e, result);
          return o.clientObj.close();
        });
      });
    });
  };

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
